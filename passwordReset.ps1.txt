#User Add Delete on multiple servers
$InvocatioPath = Split-Path $MyInvocation.MyCommand.Path
 #provide path of the serverlist 
 $serverList="D:\Users\kanchan.u\Desktop\UCSF KC\serverList.txt"
 $userList="D:\Users\kanchan.u\Desktop\UCSF KC\username.txt"
 $sshModulePath = "D:\Posh-SSH-master\Posh-SSH-master\Posh-SSH.psd1"
if(!(Get-Module Posh-SSH)){Import-Module $sshModulePath}
 
 Function Get-Cred
{
    try
    {
        $a=get-credential
        $u = $a.username
        $user = $u.split("\")
        $p = $a.password
        $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($p)
        $pass = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
    }   
    catch
    {
            $l= New-Object -ComObject wscript.shell
            if($m -eq '1')
            {
                write-host 'Script cancelled'
                $host.SetShouldExit(1)
                exit
            }
            else
            {
                exit
            }
    }       
    return $a
}

 $cred = Get-Cred -Message "Please Enter the SSH Login Credentials"
 $serverNames = Get-Content $serverList 
( Get-Content $serverList  ) | Where { $_ } | Set-Content $serverList 
$serverNames = Get-Content $serverList 

 $userIDs=Get-Content $userList
 
                $usrPswd = read-host "enter the password to reset"
  
                foreach($serverName in $serverNames)
                {


                            if(Test-Connection -ComputerName $serverName -Count 1 -ErrorAction SilentlyContinue)
  {
    #Pingable server
    
                  write-host ""
    write-host  "server $serverName is PINGABLE" -ForegroundColor Yellow
 
       
                 Write-Verbose "Creating Session With $serverName"
                $session = New-SSHSession -ComputerName $serverName -Credential $cred -Port 22 -AcceptKey -ConnectionTimeout 300 -ErrorAction Stop
                


                Write-Host "connected to $serverName" -ForegroundColor Yellow
                    $ShellStream = New-SSHShellStream -SSHSession $session

   # $userID=read-host "enter user id's for which you want to change the password"
    
                                    foreach($userID in $userIDs)
                                    {
                                    $CheckUser="getent passwd $userID"
                                    $UserExists = Invoke-SSHCommand -SSHSession $session -Command $CheckUser -EnsureConnection | select -exp Output            
                                    if($UserExists -match $userID){
                                      
                                        #Reset password
                                       #Reset password
                                      $sshAction = "sudo passwd $userID"
                                        $span = New-TimeSpan -Seconds 10
                                        $SSHContent = $ShellStream.WriteLine($sshAction)
                                        $SSHContent +=$ShellStream.Expect("password for $($cred.UserName):",$span) 
                                        if($SSHContent.Contains("password for $($cred.UserName):")) 
                                        {
                                            $SSHContent +=$ShellStream.WriteLine($($Cred.GetNetworkCredential().Password))
                                        }
                                        
                                        $SSHContent +=$ShellStream.Expect("New password:",$span)
                                        if($SSHContent.Contains("New password:"))
                                        {
                                            $SSHContent +=$ShellStream.WriteLine($usrPswd)
                                        }
                                        $SSHContent +=$ShellStream.Expect("Retype new password:",$span)
                                        if($SSHContent.Contains("Retype new password:"))
                                        {
                                            $SSHContent +=$ShellStream.WriteLine($usrPswd)
                                        }
                                        $SSHContent +=$ShellStream.Expect([regex]"[\]$]",$span)
                                        $SSHContent += $ShellStream.Read()

                                        Start-Sleep -Seconds 5
                                        if($SSHContent.Contains('passwd: all authentication tokens updated successfully')){
                                            #Write-output password reset successfull
                                            Write-host "Password Reset Successful for $userID" -ForegroundColor Cyan
                                        }
                                        Write-Host $SSHContent
                                        $SSHContent = $null
                                    }
                                    else{
 
                                        #Write-output $userID not added in $ServerName
                                        Write-Output "$userID does not exist"
                                        exit
                                    } #end of if user exist

                                   }#end of inner for
 
 
                    
                    }#end of test connection if server is pingable or not
                    else
                    {
                    write-host "server $serverName is NOT PINGABLE" -ForegroundColor Red -BackgroundColor White -ErrorAction SilentlyContinue
                    
                    }
                     
                     
                    $shellstream.dispose()
                    Start-Sleep -Seconds 5
                    $session.Disconnect() 

                    
                    Start-Sleep -Seconds 5
                     }#end of outer for